# -*- coding: utf-8 -*-
"""Review_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1727b-y95hSyMk06HeOo7NIAqTGFc987W
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt


from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix,classification_report
from sklearn.feature_extraction.text import CountVectorizer
import tensorflow as tf


import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

data = pd.read_csv('Restaurant_Reviews.tsv', delimiter='\t', quoting=3)

data.head()

data.shape

# data cleaning

corpus = []

for i in range(0,1000):
  review = re.sub('[^a-zA-Z]', ' ', data['Review'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_words = stopwords.words('english')
  all_words.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_words)]
  review = ' '.join(review)
  corpus.append(review)

print(corpus)

# bag of words model

cv = CountVectorizer(max_features=1500)
X = cv.fit_transform(corpus).toarray()

X

y = data.iloc[:,-1].values

y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2, random_state = 365)

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

y_pred

accuracy_score(y_test, y_pred)

confusion_matrix(y_test, y_pred)

print(classification_report(y_test, y_pred))

print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Dense(units=500, activation='relu'))
model.add(tf.keras.layers.Dense(units=500, activation='relu'))
model.add(tf.keras.layers.Dense(units=500, activation='relu'))
model.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])

R = model.fit(X_train, y_train, batch_size=128, epochs=100)

y_pred_2 = model.predict(X_test)

y_pred_2

prediction = model.predict(X_test)

prediction = (prediction>0.5)

prediction

def review(pred):
  for i in pred:
    if i>0.5:
      print('positive review')
    else:
      print('negative review')

review(prediction[6])

plt.figure(figsize=(16,6))

plt.subplot(1,2,1)
plt.plot(R.history['accuracy'],label='accuracy during model training',color='green')
plt.xlabel('Epochs')
plt.title('ACCURACY', fontweight='bold')
plt.legend()

plt.subplot(1,2,2)
plt.plot(R.history['loss'], label='loss during model training',color='r')
plt.xlabel('Epochs')
plt.title('LOSS',fontweight='bold')
plt.legend()

plt.tight_layout()

def review_system():
  rvs = input('please enter your review: ')
  rvs = re.sub('[^a-zA-Z]', ' ', rvs)
  rvs = rvs.lower()
  rvs = rvs.split()
  ps = PorterStemmer()
  all_words = stopwords.words('english')
  all_words.remove('not')
  rvs = [ps.stem(word) for word in rvs if not word in set(all_words)]
  rvs = ' '.join(rvs)
  new_corpus = [rvs]
  new_X_test = cv.transform(new_corpus).toarray()
  new_y_pred = model.predict(new_X_test)
  new_y_pred = (new_y_pred>0.5)
  for i in new_y_pred:
    if i>0.5:
      return'Positive Review'
    else:
      return 'Negative Review'
  print(new_y_pred)

review_system()

review_system()

review_system()

review_system()

model.save('Review_System.h5')

review_system()

